name: Generate code and create pull request
on:
  workflow_dispatch:
    inputs:
      run-prefix:
        description: 'Run prefix {report_id}_{version}'
        required: true

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        variant: [variant1, variant2]
      max-parallel: 5
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Run generator for ${{ matrix.variant }}
        run: |
          python scripts/generator.py > ${{ github.event.inputs['run-prefix'] }}-${{ matrix.variant }}.py

      - name: Upload code artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs['run-prefix'] }}-${{ matrix.variant }}
          path: ${{ github.event.inputs['run-prefix'] }}-${{ matrix.variant }}.py
          retention-days: 7

  score:
    needs: generate
    runs-on: ubuntu-latest
    outputs:
      best: ${{ steps.select.outputs.best }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download code artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          merge-multiple: true

      - name: Download test files
        run: |
          python scripts/setup_tests.py

      - name: Run tests and select best candidate
        id: select
        run: |
          # Expect test.py to produce a ./best.txt with contents `best=xxx.py`
          python scripts/run_tests.py
          echo "$(cat best.txt)" >> "$GITHUB_OUTPUT"

      - name: Check GH Output
        run: echo ${{ toJSON(steps.select.outputs) }}

  commit:
    needs: score
    runs-on: ubuntu-latest
    steps:
      - run: echo '${{ toJSON(needs.score.outputs) }}'
      
      - name: Commit to repo
        run: |
          BEST_PATH="${{ needs.score.outputs.best }}"
          echo $BEST_PATH
          BASE_NAME=$(basename "$FILE_PATH")
          NEW_BEST_PATH="${BASE_NAME%-variant*}.py"

          BASE_BRANCH="${{ github.event.inputs['run-prefix'] }}"
          COMMIT_BRANCH="$BASE_BRANCH"
          COUNTER=2
          
          # Loop until we find a branch name that doesn't exist on the remote
          while git ls-remote --exit-code --heads origin "$COMMIT_BRANCH" > /dev/null; do
            COMMIT_BRANCH="${BASE_BRANCH}-$COUNTER"
            COUNTER=$((COUNTER + 1))
          done
          
          # Fail if branch already exists since there seems to be an unexpected race condition
          git checkout -b $COMMIT_BRANCH
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add $NEW_BEST_PATH
          git commit -m "Add $NEW_BEST_PATH"
          git push origin $COMMIT_BRANCH
